
Search or jump to…
Pulls
Issues
Codespaces
Marketplace
Explore
 
@Rabbs1 
ensdomains
/
ens-contracts
Public
Code
Issues
16
Pull requests
15
Actions
Projects
Security
Insights
ensdomains/ens-contracts
Latest commit
@Arachnid
Arachnid Merge pull request #157 from ensdomains/grace-expiry
…
35 minutes ago
Git stats
 724
Files
Type
Name
Latest commit message
Commit time
.vscode
initial typescript + deploy script conversion
5 months ago
contracts
Merge branch 'master' into grace-expiry
1 hour ago
deploy
updated universalresolver deploy script
2 months ago
deployments
Deploy to Ropsten
2 months ago
scripts/wrapper
Restructure for merge into ens-contracts
14 months ago
test
Merge branch 'master' into grace-expiry
1 hour ago
typings-custom
added base deploys
5 months ago
.env.org
Make deployment and seed scripts configurable
17 months ago
.eslintrc.js
Add solidity linting and Travis
2 years ago
.gitignore
Add forge folders to gitignore
29 days ago
.npmignore
Monorepo (#1)
2 years ago
.nvmrc
Monorepo (#1)
2 years ago
.prettierrc.json
Prettify all contracts under the same rules
4 months ago
.solhint.json
Monorepo (#1)
2 years ago
.soliumrc.json
Add solidity linting and Travis
2 years ago
.travis.yml
Revert mistaken changes to travis config
14 months ago
LICENSE.txt
Monorepo (#1)
2 years ago
README.md
Fix: typos
29 days ago
hardhat.config.ts
Change runs to 2500 so it is deployable
2 days ago
index.js
Made DNSSEC oracle pure
6 months ago
package.json
Add hardhat contract sizer
11 days ago
tsconfig.json
added deployment-artifacts
5 months ago
yarn.lock
Merge branch 'master' into grace-expiry
1 hour ago
README.md
ENS
Build Status

For documentation of the ENS system, see docs.ens.domains.

npm package
This repo doubles as an npm package with the compiled JSON contracts

import {
  BaseRegistrar,
  BaseRegistrarImplementation,
  BulkRenewal,
  ENS,
  ENSRegistry,
  ENSRegistryWithFallback,
  ETHRegistrarController,
  FIFSRegistrar,
  LinearPremiumPriceOracle,
  PriceOracle,
  PublicResolver,
  Resolver,
  ReverseRegistrar,
  StablePriceOracle,
  TestRegistrar
} from '@ensdomains/ens-contracts'
Importing from solidity
// Registry
import '@ensdomains/ens-contracts/contracts/registry/ENS.sol';
import '@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol';
import '@ensdomains/ens-contracts/contracts/registry/ENSRegistryWithFallback.sol';
import '@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol';
import '@ensdomains/ens-contracts/contracts/registry/TestRegistrar.sol';
// EthRegistrar
import '@ensdomains/ens-contracts/contracts/ethregistrar/BaseRegistrar.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/BaseRegistrarImplementation.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/BulkRenewal.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/ETHRegistrarController.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/LinearPremiumPriceOracle.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/PriceOracle.sol';
import '@ensdomains/ens-contracts/contracts/ethregistrar/StablePriceOracle.sol';
// Resolvers
import '@ensdomains/ens-contracts/contracts/resolvers/PublicResolver.sol';
import '@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol';
Accessing to binary file.
If your environment does not have compiler, you can access to the raw hardhat artifacts files at node_modules/@ensdomains/ens-contracts/artifacts/contracts/${modName}/${contractName}.sol/${contractName}.json

Contracts
Registry
The ENS registry is the core contract that lies at the heart of ENS resolution. All ENS lookups start by querying the registry. The registry maintains a list of domains, recording the owner, resolver, and TTL for each, and allows the owner of a domain to make changes to that data. It also includes some generic registrars.

ENS.sol
Interface of the ENS Registry.

ENSRegistry
Implementation of the ENS Registry, the central contract used to look up resolvers and owners for domains.

ENSRegistryWithFallback
The new implementation of the ENS Registry after the 2020 ENS Registry Migration.

FIFSRegistrar
Implementation of a simple first-in-first-served registrar, which issues (sub-)domains to the first account to request them.

ReverseRegistrar
Implementation of the reverse registrar responsible for managing reverse resolution via the .addr.reverse special-purpose TLD.

TestRegistrar
Implementation of the .test registrar facilitates easy testing of ENS on the Ethereum test networks. Currently deployed on Ropsten network, it provides functionality to instantly claim a domain for test purposes, which expires 28 days after it was claimed.

EthRegistrar
Implements an ENS registrar intended for the .eth TLD.

These contracts were audited by ConsenSys Diligence; the audit report is available here.

BaseRegistrar
BaseRegistrar is the contract that owns the TLD in the ENS registry. This contract implements a minimal set of functionality:

The owner of the registrar may add and remove controllers.
Controllers may register new domains and extend the expiry of (renew) existing domains. They can not change the ownership or reduce the expiration time of existing domains.
Name owners may transfer ownership to another address.
Name owners may reclaim ownership in the ENS registry if they have lost it.
Owners of names in the interim registrar may transfer them to the new registrar, during the 1 year transition period. When they do so, their deposit is returned to them in its entirety.
This separation of concerns provides name owners strong guarantees over continued ownership of their existing names, while still permitting innovation and change in the way names are registered and renewed via the controller mechanism.

EthRegistrarController
EthRegistrarController is the first implementation of a registration controller for the new registrar. This contract implements the following functionality:

The owner of the registrar may set a price oracle contract, which determines the cost of registrations and renewals based on the name and the desired registration or renewal duration.
The owner of the registrar may withdraw any collected funds to their account.
Users can register new names using a commit/reveal process and by paying the appropriate registration fee.
Users can renew a name by paying the appropriate fee. Any user may renew a domain, not just the name's owner.
The commit/reveal process is used to avoid frontrunning, and operates as follows:

A user commits to a hash, the preimage of which contains the name to be registered and a secret value.
After a minimum delay period and before the commitment expires, the user calls the register function with the name to register and the secret value from the commitment. If a valid commitment is found and the other preconditions are met, the name is registered.
The minimum delay and expiry for commitments exist to prevent miners or other users from effectively frontrunning registrations.

SimplePriceOracle
SimplePriceOracle is a trivial implementation of the pricing oracle for the EthRegistrarController that always returns a fixed price per domain per year, determined by the contract owner.

StablePriceOracle
StablePriceOracle is a price oracle implementation that allows the contract owner to specify pricing based on the length of a name, and uses a fiat currency oracle to set a fixed price in fiat per name.

Resolvers
Resolver implements a general-purpose ENS resolver that is suitable for most standard ENS use cases. The public resolver permits updates to ENS records by the owner of the corresponding name.

PublicResolver includes the following profiles that implements different EIPs.

ABIResolver = EIP 205 - ABI support (ABI()).
AddrResolver = EIP 137 - Contract address interface. EIP 2304 - Multicoin support (addr()).
ContentHashResolver = EIP 1577 - Content hash support (contenthash()).
InterfaceResolver = EIP 165 - Interface Detection (supportsInterface()).
NameResolver = EIP 181 - Reverse resolution (name()).
PubkeyResolver = EIP 619 - SECP256k1 public keys (pubkey()).
TextResolver = EIP 634 - Text records (text()).
DNSResolver = Experimental support is available for hosting DNS domains on the Ethereum blockchain via ENS. The more detail is on the old ENS doc.
Developer guide
How to setup
git clone https://github.com/ensdomains/ens-contracts
cd ens-contracts
yarn
How to run tests
yarn test
How to publish
yarn pub
Release flow
Smart contract development tends to take a long release cycle. To prevent unnecessary dependency conflicts, please create a feature branch (features/$BRNACH_NAME) and raise a PR against the feature branch. The feature branch must be merged into master only after the smart contracts are deployed to the Ethereum mainnet.

